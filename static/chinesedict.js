// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var ChineseDict, noDuplicates, pinyinutils, print, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  print = console.log;

  pinyinutils = require('./pinyinutils');

  noDuplicates = function(list) {
    var output, x, _i, _len;
    output = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      x = list[_i];
      if (__indexOf.call(output, x) < 0) {
        output.push(x);
      }
    }
    return output;
  };

  ChineseDict = (function() {
    function ChineseDict(dictText) {
      var english, form, forms, line, pinyin, prn, reading, readings, simp, topEnglish, topReading, trad, wordLookup, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      wordLookup = {};
      _ref = dictText.split('\n');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        line = line.trim();
        if (line[0] === '#') {
          continue;
        }
        trad = line.slice(0, line.indexOf(' '));
        line = line.slice(line.indexOf(' ') + 1);
        simp = line.slice(0, line.indexOf(' '));
        line = line.slice(line.indexOf(' ') + 1);
        pinyin = line.slice(line.indexOf('[') + 1, line.indexOf(']'));
        pinyin = pinyinutils.toneNumberToMark(pinyin);
        english = line.slice(line.indexOf('/') + 1, -1);
        readings = [pinyin];
        if (english.indexOf('pr. [') !== -1) {
          prn = english.slice(english.indexOf('pr. [') + 'pr. ['.length);
          prn = prn.slice(0, prn.indexOf(']'));
          prn = pinyinutils.toneNumberToMark(prn);
          readings.push(prn);
        }
        forms = [trad, simp, trad.replace('甚', '什'), trad.replace('沒', '没')];
        forms = noDuplicates(forms);
        for (_j = 0, _len1 = forms.length; _j < _len1; _j++) {
          form = forms[_j];
          if (wordLookup[form] == null) {
            wordLookup[form] = [];
          }
          for (_k = 0, _len2 = readings.length; _k < _len2; _k++) {
            reading = readings[_k];
            if (reading !== pinyin) {
              english = english + ' Standard pronunciation: ' + pinyin;
            }
            if (reading.toLowerCase() === reading) {
              if (wordLookup[form].length > 0) {
                _ref1 = wordLookup[form][0], topReading = _ref1[0], topEnglish = _ref1[1];
                if ((topReading.toLowerCase() !== topReading) || (topEnglish.indexOf('variant of ') === 0) || (topEnglish.indexOf('see ') === 0 && topEnglish.slice(0, 11).indexOf('[') !== -1)) {
                  wordLookup[form].unshift([reading, english]);
                  continue;
                }
                if (topEnglish.indexOf('variant of ') === 0) {
                  wordLookup[form].unshift([reading, english]);
                  continue;
                }
              }
            }
            wordLookup[form].push([reading, english]);
          }
        }
      }
      this.wordLookup = wordLookup;
    }

    ChineseDict.prototype.getPinyinForWord = function(word) {
      var res;
      res = this.wordLookup[word];
      if ((res != null) && res.length > 0) {
        return res[0][0];
      } else {
        return '';
      }
    };

    ChineseDict.prototype.getEnglishListForWord = function(word) {
      var def, english, output, pinyin, res, _i, _j, _len, _len1, _ref, _ref1;
      res = this.wordLookup[word];
      if (res != null) {
        output = [];
        for (_i = 0, _len = res.length; _i < _len; _i++) {
          _ref = res[_i], pinyin = _ref[0], english = _ref[1];
          _ref1 = english.split('/');
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            def = _ref1[_j];
            output.push(def.trim());
          }
        }
        return output;
      }
      return [];
    };

    ChineseDict.prototype.getEnglishForWord = function(word) {
      var res;
      res = this.wordLookup[word];
      if ((res != null) && res.length > 0) {
        return res[0][1];
      } else {
        return '';
      }
    };

    ChineseDict.prototype.getEnglishForWordAndPinyin = function(word, pinyin) {
      var res, x, _i, _len;
      res = this.wordLookup[word];
      if ((res != null) && res.length > 0) {
        for (_i = 0, _len = res.length; _i < _len; _i++) {
          x = res[_i];
          if (x[0] === pinyin) {
            return x[1];
          }
        }
        return res[0][1];
      }
      return '';
    };

    ChineseDict.prototype.getPinyin = function(sentence) {
      var nwordList, word, wordList;
      wordList = this.getWordList(sentence);
      nwordList = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = wordList.length; _i < _len; _i++) {
          word = wordList[_i];
          _results.push(this.getPinyinForWord(word));
        }
        return _results;
      }).call(this);
      return nwordList.join(' ');
    };

    ChineseDict.prototype.getWordList = function(sentence) {
      var i, longestStartWord, myself, nextWord, words;
      myself = this;
      longestStartWord = function(remaining) {
        if (myself.getEnglishForWord(remaining) !== '') {
          return remaining;
        }
        if (remaining.length === 1) {
          return remaining;
        }
        return longestStartWord(remaining.slice(0, remaining.length - 1));
      };
      words = [];
      i = 0;
      while (i < sentence.length) {
        nextWord = longestStartWord(sentence.slice(i));
        words.push(nextWord);
        i += nextWord.length;
      }
      return words;
    };

    return ChineseDict;

  })();

  root.ChineseDict = ChineseDict;

}).call(this);
